name: Test
on: [workflow_call]

jobs:
  test-php84:
    name: php 8.4 on ubuntu-latest
    runs-on: ubuntu-latest

    env:
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: phpscore_test
      DB_USERNAME: root
      DB_PASSWORD: password

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: phpscore_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, pdo_mysql, tokenizer, xml, zlib, :php-psr
          coverage: none

      - name: Prepare the environment
        run: cp .env.example .env

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Setup composer cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Set up Flux
        env:
          FLUX_USERNAME: ${{ secrets.FLUX_USERNAME }}
          FLUX_LICENSE_KEY: ${{ secrets.FLUX_LICENSE_KEY }}
        run: composer config http-basic.composer.fluxui.dev "$FLUX_USERNAME" "$FLUX_LICENSE_KEY"

      - name: Install composer dependencies
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --ignore-platform-reqs

      - name: Run composer post-install scripts
        run: composer run-script post-autoload-dump

      - name: Generate application key
        run: php artisan key:generate

      - name: Configure database
        run: |
          # Update .env file with database settings
          sed -i 's/^DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
          sed -i 's/^DB_HOST=.*/DB_HOST=127.0.0.1/' .env
          sed -i 's/^DB_PORT=.*/DB_PORT=3306/' .env
          sed -i 's/^DB_DATABASE=.*/DB_DATABASE=phpscore_test/' .env
          sed -i 's/^DB_USERNAME=.*/DB_USERNAME=root/' .env
          sed -i 's/^DB_PASSWORD=.*/DB_PASSWORD=password/' .env
          # Clear config cache to ensure env vars are used
          php artisan config:clear

      - name: Prepare the database
        run: |
          php artisan migrate:fresh --force --no-interaction

      - name: Clear all caches
        run: |
          php artisan cache:clear
          php artisan view:clear
          php artisan route:clear

      - name: Install Playwright
        run: |
          npm install
          npx playwright install --with-deps chromium

      - name: Run tests
        run: |
          echo "Testing database connection..."
          php artisan tinker --execute="echo 'DB Connected: ' . (DB::connection()->getPdo() ? 'Yes' : 'No');"
          echo "Checking environment..."
          php artisan tinker --execute="echo 'DB_PASSWORD from env: ' . env('DB_PASSWORD');"
          php artisan tinker --execute="echo 'DB_PASSWORD from config: ' . config('database.connections.mysql.password');"
          echo "Running tests..."
          ./vendor/bin/pest --stop-on-failure 2>&1 | tee test-output.log || true
          echo "Test exit code: $?"
          tail -100 test-output.log

  test-php85:
    name: php 8.5 on ubuntu-latest (experimental)
    runs-on: ubuntu-latest
    continue-on-error: true

    env:
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: phpscore_test
      DB_USERNAME: root
      DB_PASSWORD: password

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: phpscore_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.5'
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, pdo_mysql, tokenizer, xml, zlib, :php-psr
          coverage: none

      - name: Prepare the environment
        run: cp .env.example .env

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Setup composer cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Set up Flux
        env:
          FLUX_USERNAME: ${{ secrets.FLUX_USERNAME }}
          FLUX_LICENSE_KEY: ${{ secrets.FLUX_LICENSE_KEY }}
        run: composer config http-basic.composer.fluxui.dev "$FLUX_USERNAME" "$FLUX_LICENSE_KEY"

      - name: Install composer dependencies
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --ignore-platform-reqs

      - name: Run composer post-install scripts
        run: composer run-script post-autoload-dump

      - name: Generate application key
        run: php artisan key:generate

      - name: Configure database
        run: |
          # Update .env file with database settings
          sed -i 's/^DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
          sed -i 's/^DB_HOST=.*/DB_HOST=127.0.0.1/' .env
          sed -i 's/^DB_PORT=.*/DB_PORT=3306/' .env
          sed -i 's/^DB_DATABASE=.*/DB_DATABASE=phpscore_test/' .env
          sed -i 's/^DB_USERNAME=.*/DB_USERNAME=root/' .env
          sed -i 's/^DB_PASSWORD=.*/DB_PASSWORD=password/' .env
          # Clear config cache to ensure env vars are used
          php artisan config:clear

      - name: Prepare the database
        run: |
          php artisan migrate:fresh --force --no-interaction

      - name: Clear all caches
        run: |
          php artisan cache:clear
          php artisan view:clear
          php artisan route:clear

      - name: Install Playwright
        run: |
          npm install
          npx playwright install --with-deps chromium

      - name: Run tests
        run: |
          echo "Testing database connection..."
          php artisan tinker --execute="echo 'DB Connected: ' . (DB::connection()->getPdo() ? 'Yes' : 'No');"
          echo "Checking environment..."
          php artisan tinker --execute="echo 'DB_PASSWORD from env: ' . env('DB_PASSWORD');"
          php artisan tinker --execute="echo 'DB_PASSWORD from config: ' . config('database.connections.mysql.password');"
          echo "Running tests..."
          ./vendor/bin/pest --stop-on-failure 2>&1 | tee test-output.log || true
          echo "Test exit code: $?"
          tail -100 test-output.log
